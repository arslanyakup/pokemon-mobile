{"version":3,"sources":["HeaderConfig.tsx"],"names":["useTheme","React","ScreenStackHeaderBackButtonImage","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderLeftView","ScreenStackHeaderRightView","HeaderConfig","route","title","headerRight","headerLeft","headerCenter","headerTitle","headerBackTitle","headerBackTitleVisible","backButtonImage","headerHideBackButton","headerHideShadow","headerLargeTitleHideShadow","headerTintColor","headerTopInsetEnabled","headerLargeTitle","headerTranslucent","headerStyle","headerLargeStyle","headerTitleStyle","headerLargeTitleStyle","headerBackTitleStyle","headerShown","backButtonInCustomView","colors","tintColor","primary","backgroundColor","card","fontFamily","fontSize","blurEffect","color","undefined","name","text"],"mappings":"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","sourcesContent":["import { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport { NativeStackNavigationOptions } from '../types';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig({\n  route,\n  title,\n  headerRight,\n  headerLeft,\n  headerCenter,\n  headerTitle,\n  headerBackTitle,\n  headerBackTitleVisible = true,\n  backButtonImage,\n  headerHideBackButton,\n  headerHideShadow,\n  headerLargeTitleHideShadow,\n  headerTintColor,\n  headerTopInsetEnabled = true,\n  headerLargeTitle,\n  headerTranslucent,\n  headerStyle = {},\n  headerLargeStyle = {},\n  headerTitleStyle = {},\n  headerLargeTitleStyle = {},\n  headerBackTitleStyle = {},\n  headerShown,\n  backButtonInCustomView,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor = headerTintColor ?? colors.primary;\n\n  return (\n    <ScreenStackHeaderConfig\n      backButtonInCustomView={backButtonInCustomView}\n      backgroundColor={\n        headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card\n      }\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={headerBackTitleStyle.fontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      blurEffect={headerStyle.blurEffect}\n      color={tintColor}\n      hidden={headerShown === false}\n      hideBackButton={headerHideBackButton}\n      hideShadow={headerHideShadow}\n      largeTitle={headerLargeTitle}\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}\n      largeTitleColor={headerLargeTitleStyle.color}\n      largeTitleFontFamily={headerLargeTitleStyle.fontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      titleFontFamily={headerTitleStyle.fontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      topInsetEnabled={headerTopInsetEnabled}\n      translucent={headerTranslucent === true}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]}